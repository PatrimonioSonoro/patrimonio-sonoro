"use client";
import { useEffect, useState } from 'react';
import { supabase } from './supabaseClient';

// Hook simplificado para analytics que funciona directamente con Supabase
export function useAnalyticsDashboard() {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchStats = async () => {
    try {
      setLoading(true);
      setError(null);

      // Obtener estadÃ­sticas bÃ¡sicas
      const { count: pageViewsCount } = await supabase
        .from('page_views')
        .select('*', { count: 'exact', head: true });

      const { data: uniqueUsersData } = await supabase
        .from('page_views')
        .select('session_id')
        .order('session_id');
      
      const uniqueUsers = new Set(uniqueUsersData?.map(u => u.session_id)).size;

      const { count: contentInteractions } = await supabase
        .from('content_interactions')
        .select('*', { count: 'exact', head: true });

      const { count: socialClicks } = await supabase
        .from('social_media_clicks')
        .select('*', { count: 'exact', head: true });

      // PÃ¡ginas mÃ¡s visitadas
      const { data: pageStatsData } = await supabase
        .from('page_views')
        .select('page_url')
        .order('viewed_at', { ascending: false });

      const pageStats = [];
      if (pageStatsData) {
        const pageCounts = {};
        pageStatsData.forEach(page => {
          pageCounts[page.page_url] = (pageCounts[page.page_url] || 0) + 1;
        });
        
        Object.entries(pageCounts).forEach(([url, views]) => {
          pageStats.push({ page_url: url, views });
        });
        
        pageStats.sort((a, b) => b.views - a.views);
      }

      const statsData = {
        pageViews: pageViewsCount || 0,
        uniqueUsers: uniqueUsers || 0,
        contentInteractions: contentInteractions || 0,
        socialClicks: socialClicks || 0,
        pageStats: pageStats.slice(0, 5)
      };

      setStats(statsData);
      
      console.log('ðŸ“Š EstadÃ­sticas cargadas:', statsData);

    } catch (err) {
      console.error('Error cargando estadÃ­sticas:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStats();
  }, []);

  return { stats, loading, error, refetch: fetchStats };
}

// Hook para tracking en tiempo real
export function useRealtimeAnalytics(onUpdate) {
  useEffect(() => {
    console.log('ðŸ”„ Configurando suscripciones en tiempo real...');

    const channels = [
      supabase
        .channel('page_views')
        .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'page_views' }, (payload) => {
          console.log('ðŸ“„ Nueva vista de pÃ¡gina:', payload);
          onUpdate({ ...payload, table: 'page_views' });
        })
        .subscribe(),

      supabase
        .channel('content_interactions')
        .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'content_interactions' }, (payload) => {
          console.log('ðŸŽµ Nueva interacciÃ³n con contenido:', payload);
          onUpdate({ ...payload, table: 'content_interactions' });
        })
        .subscribe(),

      supabase
        .channel('social_media_clicks')
        .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'social_media_clicks' }, (payload) => {
          console.log('ðŸ“± Nuevo click en redes sociales:', payload);
          onUpdate({ ...payload, table: 'social_media_clicks' });
        })
        .subscribe()
    ];

    return () => {
      channels.forEach(channel => {
        supabase.removeChannel(channel);
      });
    };
  }, [onUpdate]);
}

// FunciÃ³n para tracking directo de eventos
export async function trackEvent(eventType, data = {}) {
  // No ejecutar en servidor / durante SSR
  if (typeof window === 'undefined') {
    console.warn('trackEvent llamado fuera del cliente, se ignora:', eventType);
    return { ok: false, error: 'ssr' };
  }

  try {
    console.log(`ðŸ“Š Tracking evento: ${eventType}`);

    // Generar session_id Ãºnico para esta sesiÃ³n (proteger storage)
    let sessionId = null;
    try {
      sessionId = sessionStorage.getItem('analytics_session_id');
      if (!sessionId) {
        sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        sessionStorage.setItem('analytics_session_id', sessionId);
      }
    } catch (e) {
      console.warn('No se pudo acceder a sessionStorage:', e?.message || e);
    }

    const baseData = {
      session_id: sessionId,
      user_agent: (typeof navigator !== 'undefined' && navigator.userAgent) || null,
      created_at: new Date().toISOString()
    };

    // Normalize incoming data so we never send undefined values
    const safe = (v, fallback = null) => (typeof v === 'undefined' ? fallback : v);

    if (!data || typeof data !== 'object') data = {};

    // Prepare payload per event type and insert
    const EDGE_URL = process.env.NEXT_PUBLIC_ANALYTICS_EDGE_URL || null;

    if (eventType === 'page_view') {
      const payload = {
        session_id: baseData.session_id,
        user_agent: baseData.user_agent,
        created_at: baseData.created_at,
        page_url: safe(data.page_url, window.location.pathname),
        page_title: safe(data.page_title, typeof document !== 'undefined' ? document.title : null),
        referrer_url: safe(data.referrer_url, typeof document !== 'undefined' ? document.referrer : null),
        viewed_at: safe(data.viewed_at, new Date().toISOString())
      };

      const res = await supabase.from('page_views').insert(payload).select();
      if (res.error) {
        // Robust logging: stringify error and include full response + payload
        let errInfo = res.error;
        try {
          errInfo = JSON.parse(JSON.stringify(res.error));
        } catch (e) {
          // fall back to original
        }
        console.error('Supabase error inserting page_view:', errInfo, 'supabaseRes:', res, 'payload:', payload);

        // Fallback to Edge Function if configured
        if (EDGE_URL) {
          try {
            const resp = await fetch(EDGE_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ eventType: 'page_view', payload })
            });
            const body = await resp.text();
            console.log('Fallback Edge response (page_view):', resp.status, body);
            return { ok: resp.ok, data: body };
          } catch (edgeErr) {
            console.error('Edge fallback failed (page_view):', edgeErr);
            return { ok: false, error: res.error };
          }
        }

        return { ok: false, error: res.error };
      }

      console.log('âœ… Vista de pÃ¡gina registrada', { inserted: res.data?.length || 0 });
      return { ok: true, data: res.data };
    }

    if (eventType === 'content_interaction') {
      const payload = {
        session_id: baseData.session_id,
        user_agent: baseData.user_agent,
        created_at: baseData.created_at,
        content_id: safe(data.content_id, null),
        content_title: safe(data.content_title, null),
        content_type: safe(data.content_type, 'audio'),
        interaction_type: safe(data.interaction_type, 'play'),
        page_url: safe(data.page_url, window.location.pathname),
        interacted_at: safe(data.interacted_at, new Date().toISOString())
      };

      const res = await supabase.from('content_interactions').insert(payload).select();
      if (res.error) {
        let errInfo = res.error;
        try { errInfo = JSON.parse(JSON.stringify(res.error)); } catch (e) {}
        console.error('Supabase error inserting content_interaction:', errInfo, 'supabaseRes:', res, 'payload:', payload);

        if (EDGE_URL) {
          try {
            const resp = await fetch(EDGE_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ eventType: 'content_interaction', payload })
            });
            const body = await resp.text();
            console.log('Fallback Edge response (content_interaction):', resp.status, body);
            return { ok: resp.ok, data: body };
          } catch (edgeErr) {
            console.error('Edge fallback failed (content_interaction):', edgeErr);
            return { ok: false, error: res.error };
          }
        }

        return { ok: false, error: res.error };
      }

      console.log('âœ… InteracciÃ³n con contenido registrada', { inserted: res.data?.length || 0 });
      return { ok: true, data: res.data };
    }

    if (eventType === 'social_click') {
      const payload = {
        session_id: baseData.session_id,
        user_agent: baseData.user_agent,
        created_at: baseData.created_at,
        platform: safe(data.platform, null),
        url: safe(data.url, null),
        page_url: safe(data.page_url, window.location.pathname),
        clicked_at: safe(data.clicked_at, new Date().toISOString())
      };

      const res = await supabase.from('social_media_clicks').insert(payload).select();
      if (res.error) {
        let errInfo = res.error;
        try { errInfo = JSON.parse(JSON.stringify(res.error)); } catch (e) {}
        console.error('Supabase error inserting social_click:', errInfo, 'supabaseRes:', res, 'payload:', payload);

        if (EDGE_URL) {
          try {
            const resp = await fetch(EDGE_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ eventType: 'social_click', payload })
            });
            const body = await resp.text();
            console.log('Fallback Edge response (social_click):', resp.status, body);
            return { ok: resp.ok, data: body };
          } catch (edgeErr) {
            console.error('Edge fallback failed (social_click):', edgeErr);
            return { ok: false, error: res.error };
          }
        }

        return { ok: false, error: res.error };
      }

      console.log('âœ… Click en redes sociales registrado', { inserted: res.data?.length || 0 });
      return { ok: true, data: res.data };
    }

    console.warn('Tipo de evento no reconocido:', eventType);
    return { ok: false, error: 'unknown_event' };
  } catch (err) {
    // Loguear error con detalle (stack o stringify)
    if (err instanceof Error) {
      console.error(`Error tracking evento ${eventType}:`, err.message, err.stack);
    } else {
      try {
        console.error(`Error tracking evento ${eventType}:`, JSON.stringify(err));
      } catch (e) {
        console.error(`Error tracking evento ${eventType}:`, err);
      }
    }
    return { ok: false, error: err };
  }
}

// Hook para auto-tracking de pÃ¡ginas
export function usePageTracking() {
  useEffect(() => {
    // Track pÃ¡gina inicial
    trackEvent('page_view', {
      page_url: window.location.pathname,
      page_title: document.title,
      referrer_url: document.referrer
    });

    console.log('ðŸš€ Auto-tracking de pÃ¡gina activado para:', window.location.pathname);
  }, []);
}